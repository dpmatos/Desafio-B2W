// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Desafio
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DesafioFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Desafio.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Desafio", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Desafio")))
            {
                global::Desafio.DesafioFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Preencher e submeter formulário completo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void PreencherESubmeterFormularioCompleto()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Preencher e submeter formulário completo", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 5
testRunner.And("preenchi todos os campos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 6
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 7
testRunner.Then("Mensagem de sucesso deve ser exibida.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submeter formulário sem preencher os campos obrigatórios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void SubmeterFormularioSemPreencherOsCamposObrigatorios()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submeter formulário sem preencher os campos obrigatórios", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 12
testRunner.Then("Mensagens de erro de campos obrigatórios não preenchidos devem ser exibidas.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submeter formulário com email inválido")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void SubmeterFormularioComEmailInvalido()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submeter formulário com email inválido", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 15
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 16
testRunner.And("preenchi todos os campos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 17
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 18
testRunner.Then("Mensagem de erro de email inválido deve ser exibida.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submeter formulário com data inválida")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void SubmeterFormularioComDataInvalida()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submeter formulário com data inválida", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 22
testRunner.And("preenchi todos os campos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 24
testRunner.Then("Mensagem de erro de data inválida deve ser exibida.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Submeter formulário com hora inválida")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void SubmeterFormularioComHoraInvalida()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submeter formulário com hora inválida", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 28
testRunner.And("preenchi todos os campos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 29
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 30
testRunner.Then("Mensagem de erro de hora inválida deve ser exibida.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecionar opção \"Other\" sem preencher a sobremesa favorita")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void SelecionarOpcaoOtherSemPreencherASobremesaFavorita()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecionar opção \"Other\" sem preencher a sobremesa favorita", null, ((string[])(null)));
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 33
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 34
testRunner.And("preenchi todos os campos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
testRunner.But("não preenchi o nome da Sobremesa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Mas ");
#line 36
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 37
testRunner.Then("Mensagens de erro de campos obrigatórios não preenchidos devem ser exibidas.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecionar a mesma nota para dois Esportes diferentes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Desafio")]
        public virtual void SelecionarAMesmaNotaParaDoisEsportesDiferentes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecionar a mesma nota para dois Esportes diferentes", null, ((string[])(null)));
#line 39
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 40
testRunner.Given("que acessei a página do formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 41
testRunner.And("preenchi todos os campos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 42
testRunner.When("clicar em salvar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 43
testRunner.Then("Mensagens de erro de mesma nota escolhida para esportes diferentes deve ser exibi" +
                    "da.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
